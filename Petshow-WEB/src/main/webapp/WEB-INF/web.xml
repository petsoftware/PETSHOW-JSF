<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>Petshow</display-name>
	<welcome-file-list>
		<welcome-file>index.xhtml</welcome-file>
	</welcome-file-list>
	<!-- Custom name for main spring configuration -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value> 
			classpath:spring-context.xml 
			classpath:applicationContext-security.xml
        </param-value>
	</context-param>
	<listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

   
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	
	<context-param>
        <param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
        <param-value>true</param-value>
    </context-param>
	

	<context-param>
		<description>To enable primefaces uses awesome icons on butons</description>
		<param-name>primefaces.FONT_AWESOME</param-name>
		<param-value>true</param-value>
	</context-param>
	
	<!-- Spring Security 3 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
		
	</filter-mapping>
	
	 <listener>
        <listener-class>
            org.springframework.web.context.request.RequestContextListener
        </listener-class>
    </listener>

	<session-config>
		<session-timeout>15</session-timeout>
	</session-config>
	<!-- 
	Concurrent Session Control
	If you wish to place constraints on a single user's ability to log in to your application, Spring Security
	supports this out of the box with the following simple additions. First you need to add the following listener 
	to your	web.xml file to keep Spring Security updated about session lifecycle events:
	 -->
	<listener>
		<listener-class>
		      org.springframework.security.web.session.HttpSessionEventPublisher
		</listener-class>
	</listener>
</web-app>